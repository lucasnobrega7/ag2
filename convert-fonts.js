// Script para converter fontes OTF para WOFF2 e prepar√°-las para deploy
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Mapeamento de fontes originais para destino
const fontMapping = [
  {
    source: 'TestS√∂hne-Buch.otf',
    destination: 'soehne-web-buch.woff2',
    weight: 400,
  },
  {
    source: 'TestS√∂hne-Kr√§ftig.otf',
    destination: 'soehne-web-kraftig.woff2',
    weight: 500,
  },
  {
    source: 'TestS√∂hne-Halbfett.otf',
    destination: 'soehne-web-halbfett.woff2',
    weight: 600,
  },
];

// Verifique se as ferramentas necess√°rias est√£o instaladas
try {
  console.log('Verificando se fonttools est√° instalado...');

  // Tenta executar fonttools para ver se est√° instalado
  try {
    execSync('which fonttools');
    console.log('‚úÖ fonttools est√° instalado.');
  } catch (e) {
    console.log('‚ùå fonttools n√£o encontrado. Voc√™ precisa instal√°-lo com:');
    console.log('   pip install fonttools brotli');
    process.exit(1);
  }

  // Caminhos
  const originalFontsDir = path.join(__dirname, 'public', 'fonts', 'original');
  const outputDir = path.join(__dirname, 'public', 'fonts');

  // Verifique se os diret√≥rios existem
  if (!fs.existsSync(originalFontsDir)) {
    console.error(`‚ùå Diret√≥rio de fontes originais n√£o encontrado: ${originalFontsDir}`);
    process.exit(1);
  }

  console.log('üîÑ Convertendo fontes...');

  // Processa cada fonte
  for (const font of fontMapping) {
    const sourcePath = path.join(originalFontsDir, font.source);
    const destPath = path.join(outputDir, font.destination);

    if (!fs.existsSync(sourcePath)) {
      console.error(`‚ùå Arquivo de fonte n√£o encontrado: ${sourcePath}`);
      continue;
    }

    try {
      // Comando para converter o arquivo
      const command = `fonttools ttLib.woff2 compress "${sourcePath}" -o "${destPath}"`;
      console.log(`Executando: ${command}`);
      execSync(command);
      console.log(`‚úÖ Convertido: ${font.source} ‚Üí ${font.destination}`);
    } catch (error) {
      console.error(`‚ùå Erro ao converter fonte ${font.source}:`, error.message);
    }
  }

  console.log('\n‚úÖ Processo de convers√£o de fontes conclu√≠do!');
  console.log('As fontes est√£o prontas para o deploy.\n');
} catch (error) {
  console.error('‚ùå Erro durante o processo:', error.message);
  process.exit(1);
}
